r"""Models for storing schemas and data related to user defined Grades.

Grade
    \____ GradeType
                \_______grade_field_1____option_1
                 \                   \___option_2
                  \                   \__option_3
                   \____grade_field_2
                                  \______option_1
                                   \_.....

Then a Grade has serveral GradeEntries of type GradeFieldType_i

Grade
    \___grade_entry_1
    \___grade_entry_2
    \_...

"""
from django.db import models
from django.contrib.auth.models import User


# Create your models here.
class Grade(models.Model):
    """Grade assigned to an eyelid/patient by a User."""

    user = models.ForeignKey(User)
    grade_type = models.ForeignKey('grade.GradeType')


class GradeEntry(models.Model):
    """Each grade has a variable number of entries determined by its type.

    This table will store the actual data generated by the user when
    grading patients.
    """

    grade = models.ForeignKey('grade.Grade')
    grade_field_type = models.ForeignKey('grade.GradeField')
    value = models.CharField(max_length=100)

    class Meta:
        verbose_name_plural = 'grade_entries'

    def save(self, *args, **kwargs):
        """Ensure that GradeEntries with valid values can be saved."""
        if self.value in self._valid_values():
            super(GradeEntry, self).save(*args, **kwargs)
        else:
            raise ValueError(
                'Value {} is not a valid option.'.format(self.value)
            )

    def _valid_values(self):
        """Get the possible values for this GradeEntry."""
        options = self.grade_field_type.option_set.all()
        return [o.value for o in options]


class GradeType(models.Model):
    """User defined grade type.

    An (admin) user can create a new kind of question to assign to a group
    of patients in a Study.

    Once a Study has a GradeType "+added" to it, Grade forms will be generated
    for each patient displayed in that study.
    """

    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


class GradeField(models.Model):
    """Defies a field for GradeType, and has many Option objects FK'd."""

    field_name = models.CharField(
        max_length=100,
        verbose_name=('Name'),
    )

    description = models.CharField(
        max_length=100,
        blank=True,
        null=True,
    )
    grade_type = models.ForeignKey('grade.GradeType')

    def __unicode__(self):
        return '{0}'.format(self.field_name)


class Option(models.Model):
    """An element of a set of options for a grading field type.

    E.g. The grade field type "Follicles Present" has 4 options:
        1) definitely not
        2) probably not
        3) probably yes
        4) definitely yes
    which will determine the possible values of GradeEntries for this
    GradeField when a User generates an actual grade.
    """

    grade_field = models.ForeignKey('grade.GradeField')
    value = models.CharField(max_length=100)

    def __unicode__(self):
        return '{0}'.format(self.value)


def create_grade_field_with_options(
    grade_field_name,
    description,
    grade_type,
    options
):
    """Create a grade field for a given type with given options (strings).

    This is a convenience function that takes care of creating all the Option
    objects for a given grade field.
    """
    grade_field = GradeField(
        field_name=grade_field_name,
        description=description,
        grade_type=grade_type
    )
    grade_field.save()
    for opt in options:
        Option(grade_field=grade_field, value=opt).save()

    return grade_field